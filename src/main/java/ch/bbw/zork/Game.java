package ch.bbw.zork;import ch.bbw.zork.annotation.CommandHandler;import ch.bbw.zork.model.Command;import ch.bbw.zork.model.Item;import ch.bbw.zork.model.Room;import ch.bbw.zork.model.Task;import ch.bbw.zork.service.RoomService;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.lang.annotation.Annotation;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.List;import java.util.stream.Collectors;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {		private Parser parser;	private RoomService roomService;	private Reflection reflection;	private Class applicationClass;	public Game(Class applicationClass) {		this.applicationClass = applicationClass;				parser = new Parser(System.in);		this.roomService = new RoomService();		this.reflection = new Reflection();	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			try {				finished = processCommand(command);			}			catch(Exception e) {				e.printStackTrace();			}		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		roomService.setCurrentRoom(roomService.getRoomByName("entry"));		System.out.println(roomService.getCurrentRoom().longDescription());	}	private boolean processCommand(Command command) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {		String commandWord = command.getCommandWord();		boolean commandExist = false;		Class[] commandHandlers = reflection.getClassesWithAnnotation(applicationClass.getPackageName(), CommandHandler.class);		for(Class commandHandler : commandHandlers) {			if(commandHandler != null) {				Object commandHandlerInstance = commandHandler.getConstructor().newInstance();				for(Method commandMethod : commandHandler.getMethods()) {					if(commandMethod.getName().equals(commandWord)) {						if(commandMethod.getParameters().length > 0) {							commandMethod.invoke(commandHandlerInstance, command.getSecondWord());							commandExist = true;						}						else {							commandMethod.invoke(commandHandlerInstance);							commandExist = true;						}					}				}			}		}		if(!commandExist) {			System.out.println("I don't know what you mean...");		}		return false;	}	private void printHelp() {	}}