package ch.bbw.zork;import ch.bbw.zork.annotation.CommandHandler;import ch.bbw.zork.model.Command;import ch.bbw.zork.model.Item;import ch.bbw.zork.model.Room;import ch.bbw.zork.model.Task;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.lang.annotation.Annotation;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.List;import java.util.stream.Collectors;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {		private Parser parser;	private Room currentRoom;	private Room[] rooms;	private Item[] items;	private Task[] tasks;	private Class applicationClass;	public Game(Class applicationClass) {		this.applicationClass = applicationClass;				parser = new Parser(System.in);		 // start game outside		// Item		// Task	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			try {				finished = processCommand(command);			}			catch(Exception e) {				e.printStackTrace();			}		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {		String commandWord = command.getCommandWord();		ClassLoader classLoader = applicationClass.getClassLoader();		InputStream inputStream = classLoader.getResourceAsStream(applicationClass.getPackageName().replaceAll("[.]", "/"));		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));		List<Class> commandHandlers =  reader.lines()				.filter(line -> line.endsWith(".class"))				.map(line -> getClassWithAnnotation(line, applicationClass.getPackageName(), CommandHandler.class))				.collect(Collectors.toList());		boolean commandExist = false;		for(Class commandHandler : commandHandlers) {			if(commandHandler != null) {				Object commandHandlerInstance = commandHandler.getConstructor().newInstance();				for(Method commandMethod : commandHandler.getMethods()) {					if(commandMethod.getName().equals(commandWord)) {						if(commandMethod.getParameters().length > 0) {							commandMethod.invoke(commandHandlerInstance, command.getSecondWord());						}						else {							commandMethod.invoke(commandHandlerInstance);							commandExist = true;						}					}				}			}		}		if(!commandExist) {			System.out.println("I don't know what you mean...");		}		return false;	}	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at Monash Uni, Peninsula Campus.");		System.out.println();		System.out.println("Your command words are:");		//System.out.println(parser.showCommands());	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {						String direction = command.getSecondWord();				// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				System.out.println(currentRoom.longDescription());			}		}	}	private Class getClassWithAnnotation(String className, String packageName, Class<? extends Annotation> annotation) {		try {			ClassLoader classLoader = applicationClass.getClassLoader();			Class c = classLoader.loadClass(packageName + "." + className.substring(0, className.lastIndexOf(".")));			if(c.getAnnotation(CommandHandler.class) != null) {				return c;			}			else {				return null;			}		} catch (ClassNotFoundException e) {			throw new RuntimeException(e);		}	}	private Task activateTask(Object trigger) {		for(Task task : tasks) {			if(task.isActive()) {				continue;			}			if(task.getTrigger().equals(trigger)) {				task.setActive(true);				return task;			}		}		return null;	}	private void printTasks() {	}}