package ch.bbw.zork;/* * author:  Michael Kolling, Version: 1.0, Date: July 1999 * refactoring: Rinaldo Lanza, September 2020 */import ch.bbw.zork.annotation.CommandHandler;import ch.bbw.zork.model.Command;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.lang.reflect.Method;import java.sql.Ref;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class Parser {	private InputStream inputStream;	private Reflection reflection;	public Parser(InputStream inputStream) {		this.inputStream = inputStream;		this.reflection = new Reflection();	}	public Command getCommand() {		String inputLine;		String word1;		String word2;		System.out.print("> ");		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(this.inputStream));		try {			inputLine = bufferedReader.readLine();			String[] tokens = inputLine.split(" ");			switch(tokens.length) {				case 2:						return new Command(tokens[0], tokens[1]);				case 1:						return new Command(tokens[0]);				default:					System.out.println("There are too many arguments. There can max be 2 arguments.");					break;			}		} catch (java.io.IOException exc) {			System.out.println("There was an error during reading: " + exc.getMessage());		}		// TODO: handle error		return new Command(null);	}	public String showCommands() {		Class[] classes = reflection.getClassesWithAnnotation("ch.bbw.zork", CommandHandler.class);		List<String> commands = new ArrayList<>();		for(Class c : classes) {			Method[] methods = c.getDeclaredMethods();			for(Method method : methods) {				commands.add(method.getName());			}		}		return String.join("\n", commands);	}}